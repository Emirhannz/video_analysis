import os
from text_analyzer import TextAnalyzer
from rapidfuzz import fuzz

class VideoAnalyzer:
    def __init__(self, frames_dir):
        self.frames_dir = frames_dir
        self.text_analyzer = TextAnalyzer()
        self.processed_texts = []
        
    def get_frame_files(self):
        """Frame dosyalarÄ±nÄ± sÄ±ralÄ± ÅŸekilde al"""
        frames = []
        print(f"\nFrame klasÃ¶rÃ¼: {self.frames_dir}")
        try:
            files = os.listdir(self.frames_dir)
            print(f"Toplam dosya sayÄ±sÄ±: {len(files)}")
            
            for file in files:
                if file.startswith('frame_') and file.endswith('.jpg'):
                    frames.append(os.path.join(self.frames_dir, file))
            
            print(f"Bulunan frame sayÄ±sÄ±: {len(frames)}")
            if frames:
                print(f"Ä°lk frame: {frames[0]}")
                print(f"Son frame: {frames[-1]}")
            
            return sorted(frames)
        except Exception as e:
            print(f"Frame dosyalarÄ± listelenirken hata: {e}")
            return []
    
    def process_frames(self):
        """TÃ¼m frame'leri iÅŸle"""
        frames = self.get_frame_files()
        if not frames:
            print("Ä°ÅŸlenecek frame bulunamadÄ±!")
            return []

        current_texts = []
        total_frames = len(frames)
        processed_count = 0  # Ä°ÅŸlenen metin sayÄ±sÄ±

        print(f"\nToplam {total_frames} frame iÅŸlenecek...")
        print("Bu iÅŸlem biraz zaman alabilir, lÃ¼tfen bekleyin...")

        for i, frame_path in enumerate(frames, 1):
            print(f"\rFrame iÅŸleniyor: {i}/{total_frames} ({(i/total_frames)*100:.1f}%)", end="")

            # Frame'deki metinleri al
            frame_texts = self.text_analyzer.process_frame(frame_path)

            # Frame'de metin bulunduysa iÅŸle
            if frame_texts:
                completed_sentences = []
                for ft in frame_texts:
                    if ft.get('text'):
                        sentences = self.text_analyzer.sentence_buffer.add_text(ft['text'])
                        if sentences:
                            for sentence in sentences:
                                if self.text_analyzer.is_valid_sentence(sentence):
                                    completed_sentences.append({
                                        'text': sentence,
                                        'coords': ft['coords'],
                                        'entities': self.text_analyzer.extract_entities(sentence)
                                    })

                if completed_sentences:
                    print(f"\nFrame {i}: {len(completed_sentences)} cÃ¼mle tamamlandÄ±:")
                    for cs in completed_sentences[:2]:  # Ä°lk 2 cÃ¼mleyi gÃ¶ster
                        print(f"  - {cs['text']}")

                current_texts.extend(completed_sentences)

        print(f"\n\nToplam {len(current_texts)} benzersiz cÃ¼mle bulundu.")
        return current_texts

    def generate_report(self):
        """Ä°ÅŸlenmiÅŸ metinlerden rapor oluÅŸtur"""
        if not self.processed_texts:
            return "HenÃ¼z metin iÅŸlenmemiÅŸ."

        report = "ðŸ“º Video Metin Raporu:\n\n"

        # TÃ¼m metinleri birleÅŸtir (Ã¶zet iÃ§in)
        all_text = ""

        # Metinleri koordinatlarÄ±na gÃ¶re grupla
        top_texts = []    # Ãœst bÃ¶lge metinleri
        bottom_texts = [] # Alt bÃ¶lge metinleri
        other_texts = []  # DiÄŸer bÃ¶lge metinleri

        for text_info in self.processed_texts:
            try:
                coords = text_info['coords']
                text = text_info['text']
                timestamp = text_info.get('timestamp', 0)  # Zaman damgasÄ±

                # Koordinat formatÄ±nÄ± kontrol et
                if isinstance(coords, list) and len(coords) > 0:
                    if isinstance(coords[0], list):
                        y_coord = coords[0][1]  # [[x1,y1], [x2,y2], ...] formatÄ±
                    else:
                        y_coord = coords[1]     # [x1,y1,x2,y2,...] formatÄ±
                else:
                    y_coord = 300  # VarsayÄ±lan olarak orta bÃ¶lgeye koy

                text_info_with_variations = {
                    'text': text,
                    'variations': text_info.get('variations', [text]),
                    'occurrences': text_info.get('occurrences', 1),
                    'timestamp': timestamp
                }

                if y_coord < 200:  # Ãœst bÃ¶lge
                    top_texts.append(text_info_with_variations)
                elif y_coord > 400:  # Alt bÃ¶lge
                    bottom_texts.append(text_info_with_variations)
                else:  # Orta bÃ¶lge
                    other_texts.append(text_info_with_variations)
            except Exception as e:
                print(f"Metin koordinat hatasÄ±: {text} - {str(e)}")

        def format_texts_with_timestamp(texts):
            formatted = ""
            for text_info in texts:
                timestamp = text_info.get('timestamp', 0)
                minutes = int(timestamp // 60)
                seconds = int(timestamp % 60)
                formatted += f"  - [{minutes}:{seconds:02d}] {text_info['text']}\n"
            return formatted

        if top_texts:
            report += "ðŸ”¸ Ãœst BÃ¶lge Metinleri:\n"
            report += format_texts_with_timestamp(top_texts)
            report += "\n"

        if bottom_texts:
            report += "ðŸ”¸ Alt BÃ¶lge Metinleri (AltyazÄ±lar):\n"
            report += format_texts_with_timestamp(bottom_texts)
            report += "\n"

        if other_texts:
            report += "ðŸ”¸ DiÄŸer Metinler:\n"
            report += format_texts_with_timestamp(other_texts)

        return report